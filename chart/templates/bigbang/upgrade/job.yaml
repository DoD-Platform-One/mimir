{{- if eq (include "mimir.shouldDeployUpgradeResources" .) "true" }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Values.upgradeJob.name }}
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed,before-hook-creation
spec:
  template:
    metadata:
    spec:
      automountServiceAccountToken: true
      imagePullSecrets:
        - name: {{ .Values.upgradeJob.image.pullSecrets }}
      serviceAccountName: {{ .Values.upgradeJob.serviceAccount }}
      containers:
      - name: {{ .Values.upgradeJob.name }}
        image: {{ .Values.upgradeJob.image.repository }}:{{ .Values.upgradeJob.image.tag }}
        imagePullPolicy: {{ .Values.upgradeJob.image.imagePullPolicy }}
        command:
        - "/bin/bash"
        - "-c"
        - |
          set -e  # Exit on first error
          trap 'echo "Error occurred at line $LINENO"; exit 1' ERR

          # Step 1: Delete the tenant
          echo "Deleting tenant 'mimir-mimir-minio-tenant' in namespace 'mimir'..."
          kubectl delete tenant mimir-mimir-minio-tenant -n mimir  || {
              echo "Tenant deletion failed or was already deleted.";
              exit 1;
          }

          # Step 2: Remove finalizers from all matching PVs
          echo "Removing finalizers from Persistent Volumes..."

          # Create an array to hold PV names that will be patched
          pv_list=()

          kubectl get pv -o json | jq -r '
          .items[] | 
          select(.spec.claimRef.namespace=="mimir" and (.spec.claimRef.name | test("^data[0-9]-mimir-mimir-minio-tenant-pool-.*"))) | 
          .metadata.name' | while read -r pv; do
              echo "Patching PV: $pv"
              kubectl patch pv "$pv" --type=json -p '[{"op": "remove", "path": "/metadata/finalizers"}]' || {
                  echo "Failed to remove finalizer from PV: $pv";
                  exit 1;
              }
              
              # If patching is successful, add PV to the list for deletion later
              pv_list+=("$pv")
          done

          # Step 3: Delete all matching PVs
          echo "Deleting Persistent Volumes..."
          for pv in "${pv_list[@]}"; do
              echo "Deleting PV: $pv"
              kubectl delete pv "$pv" || {
                  echo "Failed to delete PV: $pv";
                  exit 1;
              }
          done

          # Step 4: Delete all PVCs that contain 'data*-mimir*' in their name
          echo "Deleting Persistent Volume Claims (PVCs) that match 'data*-mimir*'..."

          kubectl get pvc -n mimir -o json | jq -r '
          .items[] | 
          select(.metadata.name | test("data.*-mimir.*")) | 
          .metadata.name' | while read -r pvc; do
              echo "Deleting PVC: $pvc"
              kubectl delete pvc "$pvc" -n mimir || {
                  echo "Failed to delete PVC: $pvc";
                  exit 1;
              }
          done

          echo "MinIO Tenant Cleanup completed!"

        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 100m
            memory: 256Mi
        securityContext:
          capabilities:
            drop: ["ALL"]
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
      restartPolicy: Never
{{- end }}